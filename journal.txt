NOTE: A lot of the things said below could be wrong. Although I've tried to rely on facts for every statement I've made it's still very possible that some concepts are wrong.

TODAY
So here's my initial idea for the main page:

1.OnPageLoad => ajax for post titles, summaries and ids -> postsData
2.OnDone => render a post summary (PostSummary component) for every post is postsData (build href attribute value with the ID)

3.OnBlogPostClick => ajax(id) -> blog content
4.OnDone => Render post content

At first, I thought that it would be a good idea to fetch post data, and then render(append) a PostSummary component for every post returned, but then I found out that it's a good idea to have the component state decide what is going to be rendered. So, I had to create a container component - PostsContainer, which, through its state, will render the available posts.

Found a cool spinner - SpinKit by @tobiasahlin - https://github.com/tobiasahlin/SpinKit
Will try to use it inbetween all navigations. 

SOME DAYS AFTER THAT
Trying to implement React Router. 
An awesome explanation to a problem I encountered here : https://stackoverflow.com/questions/27928372/react-router-urls-dont-work-when-refreshing-or-writing-manually

Both (BrowserRouter and HashRouter) of these are pretty easy to setup in my case, but - here's something very important that concerns me (mentined in the above link) - Search Engine Optimization. Since this is a blog, it will be driven mainly by content. Can't afford to not have posts indexed by google. So the best solution here seems to build an isomorphic app (React components can be reused for both server and client side rendering). As far as I understand, the initial call to the server would alays return a server rendered page (be it index page of posts page in this case), which potentially happens a lot faster. After that, all downloaded JS will bootstrap and front-end fuzz takes the wheel. That, plus the given bonus that you'd have valid URLs that would be 'crawlable' (SEO) by google.

Isomorphic apps explained really good here : https://developer.ibm.com/node/2015/06/10/node-js-react-isomorphic-javascript-why-it-matters/

Ok, upon further reading, it seems that google is doing js based crawling, which is probably going to solve that concern. I'm going to skip doing isomorphicity (is that even a word). Sticking to 'catch-all' solution for now.

Ok, upon even further reading, fuck it, going isomorphic, why not.

A DAY OR TWO PRECEEDING THE DAY AFTER TODAY
Lots of small issues. One recent one me trying to pass data (in this case - route URLs that would be fetched from the DB) that is rendered server side to a client side react component. Long story short, relized that I don't have to do that. Can just query the api for it.

WAY TOO LONG AFTER LAST TODAY
So the problem that I will be tackling today is routes. Since the server generates all the valid routes I need a way to send them to the front end (so that browser router can pick them up). Since routes are quite the unique thing, I'm thinking of having them be rendered with all the other data upon initial request to the server (withing index page) and have the App component pick them up. I want to do this within the constructor of App so that they are picked up BEFORE any rendering is done - rendering is dependent on the routes.

Did you know that undefined is undefined and typeof undefined is also undefined but (typeof undefined === undefined) is false? That is SO funnyihatethis.
I am trying to implement a simple check for isBrowser with which i can fetch the rendered routes of the FE. I am kind of confused though - there will now be different behaviour in a component (base on environment - node or browser). I guess I was under the impression that isomorphic would mean we can reuse EVERYTHING and not have to implement env specific things. This is probably not the case and also, as I mentioned earlier, routes are special for this project so they get special treatment.

Next on the line is server rendering components that use ajax for populating their data (in this case - BlogPost). We need this data to be present in the response from the server. I really don't want to have separated logic for this.